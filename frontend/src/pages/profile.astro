---
'use:client'
import Layout from "../layouts/Layout.astro"

const title = "Profile & Settings - Echo Journal"

const user = {
  name: "Sarah Johnson",
  email: "sarah@echo.com",
  avatar: "S"
}

console.log(Astro.cookies.get('user_id')?.value);

const settingsCategories = [
  {
    id: "general",
    title: "General Settings",
    icon: "fas fa-cog",
    items: [
      { key: "darkMode", label: "Dark Mode", value: false },
      { key: "notifications", label: "Notifications", value: false }
    ]
  },
  {
    id: "account",
    title: "Account Settings",
    icon: "fas fa-user",
    items: [
      { key: "showEmail", label: "Show Email", value: true },
      { key: "profilePublic", label: "Make Profile Public", value: false }
    ]
  }
]

const helpItems = [
  {
    title: "Contact Support",
    description: "Reach out to our team for help or questions.",
    icon: "fas fa-envelope",
    color: "text-blue-600 bg-blue-50 dark:text-blue-200 dark:bg-blue-800"
  },
  {
    title: "FAQs",
    description: "Find answers to common questions about Echo.",
    icon: "fas fa-question",
    color: "text-green-600 bg-green-50 dark:text-green-200 dark:bg-green-800"
  },
  {
    title: "Privacy Policy",
    description: "Understand how we protect your data.",
    icon: "fas fa-lock",
    color: "text-purple-600 bg-purple-50 dark:text-purple-200 dark:bg-purple-800"
  },
  {
    title: "Give Feedback",
    description: "Help us improve by sharing your thoughts.",
    icon: "fas fa-comment-dots",
    color: "text-orange-600 bg-orange-50 dark:text-orange-200 dark:bg-orange-800"
  }
]

let toast = null

function applySetting(key, value) {
  toast = `Updated "${key}" to ${value ? "enabled" : "disabled"}`
  setTimeout(() => {
    toast = null
  }, 3000)
}

function handleHelpAction(action) {
  toast = `Clicked "${action}"`
  setTimeout(() => {
    toast = null
  }, 3000)
}

const userId = Astro.cookies.get('user_id')?.value;


---
<Layout title={title}>
  <div class="max-w-5xl mx-auto py-10 px-4">
    <h1 class="text-3xl font-bold mb-6 text-gray-900 dark:text-white">Settings</h1>

    <div class="grid grid-cols-1 md:grid-cols-2 gap-8">
      <!-- SETTINGS -->
      <div class="space-y-6">
        {settingsCategories.map((category) => (
          <div class="bg-white dark:bg-gray-900 p-6 rounded-lg shadow-sm">
            <h2 class="text-xl font-semibold text-gray-900 dark:text-white flex items-center mb-4">
              <i class={`${category.icon} mr-2`}></i> {category.title}
            </h2>
            <ul class="space-y-3">
              {category.items.map((item) => (
                <li class="flex justify-between items-center">
                  <span class="text-gray-800 dark:text-gray-300">{item.label}</span>
                  <label class="relative inline-flex items-center cursor-pointer">
                    <input 
                      type="checkbox" 
                      checked={item.value}
                      class="sr-only peer setting-toggle"
                      data-setting={item.key}
                    />
                    <div class="w-11 h-6 bg-gray-200 peer-focus:outline-none peer-focus:ring-4 peer-focus:ring-blue-300 dark:peer-focus:ring-blue-800 rounded-full peer dark:bg-gray-700 peer-checked:after:translate-x-full peer-checked:after:border-white after:content-[''] after:absolute after:top-[2px] after:left-[2px] after:bg-white after:border-gray-300 after:border after:rounded-full after:h-5 after:w-5 after:transition-all dark:border-gray-600 peer-checked:bg-blue-600"></div>
                  </label>
                </li>
              ))}
            </ul>
          </div>
        ))}
      </div>

      <!-- HELP & SUPPORT -->
      <div class="bg-white dark:bg-gray-900 p-6 rounded-lg shadow-sm">
        <h2 class="text-xl font-semibold text-gray-900 dark:text-white mb-4 flex items-center">
          <i class="fas fa-question-circle mr-2"></i> Help & Support
        </h2>
        <div class="grid gap-4">
          {helpItems.map((item) => (
            <button
              class={`help-button flex items-start gap-4 p-4 rounded-lg transition hover:shadow-md ${item.color}`}
              data-action={item.title}
            >
              <div class="text-2xl mt-1">
                <i class={item.icon}></i>
              </div>
              <div class="text-left">
                <h3 class="font-semibold text-gray-900 dark:text-white">{item.title}</h3>
                <p class="text-sm text-gray-600 dark:text-gray-300">{item.description}</p>
              </div>
            </button>
          ))}
        </div>
      </div>
    </div>

    {toast && (
      <div class="fixed bottom-6 right-6 bg-gray-900 text-white px-4 py-2 rounded shadow-lg z-50">
        {toast}
      </div>
    )}
  </div>
</Layout>

<script is:inline>
document.addEventListener('DOMContentLoaded', function() {
  
  // Simple toast function
  function showToast(message) {
    const toast = document.createElement('div');
    toast.className = 'fixed bottom-6 right-6 bg-blue-600 text-white px-6 py-3 rounded-lg shadow-lg z-50 transition-opacity duration-300';
    toast.textContent = message;
    toast.style.opacity = '0';
    
    document.body.appendChild(toast);
    
    setTimeout(() => toast.style.opacity = '1', 10);
    setTimeout(() => {
      toast.style.opacity = '0';
      setTimeout(() => toast.remove(), 300);
    }, 3000);
  }

  // Handle all toggle switches
  const toggles = document.querySelectorAll('.setting-toggle');
  toggles.forEach(function(toggle) {
    const settingKey = toggle.getAttribute('data-setting');
    
    // Set initial state for dark mode toggle
    if (settingKey === 'darkMode') {
      const isDark = document.documentElement.classList.contains('dark');
      toggle.checked = isDark;
    }
    
    // Add change listener
    toggle.addEventListener('change', function() {
      const isEnabled = this.checked;
      
      if (settingKey === 'darkMode') {
        // Handle dark mode
        if (isEnabled) {
          document.documentElement.classList.add('dark');
          localStorage.setItem('theme', 'dark');
          showToast('Dark mode enabled');
        } else {
          document.documentElement.classList.remove('dark');
          localStorage.setItem('theme', 'light');
          showToast('Dark mode disabled');
        }
      } else {
        // Handle other settings
        localStorage.setItem(settingKey, isEnabled.toString());
        showToast(settingKey + ' ' + (isEnabled ? 'enabled' : 'disabled'));
      }
    });
  });

  // Handle help buttons
  const helpButtons = document.querySelectorAll('.help-button');
  helpButtons.forEach(function(button) {
    button.addEventListener('click', function(e) {
      e.preventDefault();
      const action = this.getAttribute('data-action');
      
      showToast('Clicked: ' + action);
      
      // Handle specific actions
      setTimeout(function() {
        switch(action) {
          case 'Contact Support':
            window.location.href = '/support.html';
            break;
          case 'FAQs':
            window.open('https://help.example.com/faq', '_blank');
            break;
          case 'Privacy Policy':
            window.location.href = '/privacy.html';
            break;
          case 'Give Feedback':
            window.location.href = '/feedback.html';
            break;
        }
      }, 500);
    });
  });

});
</script>

<style>
/* Simple styles for smooth transitions */
.setting-toggle {
  transition: all 0.3s ease;
}

.help-button:hover {
  transform: translateY(-2px);
}
</style>